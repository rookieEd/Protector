#pragma strict
public var target: GameObject = null;
public var chaseSpeed: float = 5f;
public var targetSat: GameObject = null;
public var chanceFollowPlayer = 17f;//max 25 min 11 
public var chanceFollowSat = 11f;// max 25 min 11 
public var chanceNothing =10f;
var chance = 0f;
var multiplier : float;
var randomDirection : Vector3;

function Start () {
	//var target: GameObject = GameObject.Find("Ship2.0" || "Ship2.0(Clone)");
	//target.transform.parent = transform;
	chance =  Random.Range(0,25);// generates a number to target and object or not
	targetSat = GameObject.FindGameObjectWithTag ("Satellite");// finds sat in scene
	multiplier = Random.Range(-2f, 2f);
	randomDirection = new Vector3(Random.value, 0f, Random.value);
	
	target = GameObject.FindGameObjectWithTag ("Ship");// finds ship in scene
	
	//transform.rigidbody.AddForce(position *Time.deltaTime*100);
	//transform.TransformPoint( target.position * Time.deltaTime);
	if(target != null){// so no errors are generated by trageting something that doesn't exist
		if(chance >= chanceFollowPlayer){
			//transform.position = Vector3.MoveTowards(transform.position, target.transform.position, Time.deltaTime * chaseSpeed);
			rigidbody.AddForce((target.transform.position - transform.position).normalized * chaseSpeed);
		}
	}
	else{
		rigidbody.AddForce(randomDirection * chaseSpeed);
	}	
	if((chance <= chanceFollowSat && chance > chanceNothing) && !GUIHud.satDead){
		rigidbody.AddForce((targetSat.transform.position - transform.position).normalized * chaseSpeed);
		//transform.position = Vector3.MoveTowards(transform.position, targetSat.transform.position, Time.deltaTime * chaseSpeed);
	} else {
		rigidbody.AddForce(randomDirection * chaseSpeed);
		//transform.position = Vector3.MoveTowards(transform.position, randomDirection, Time.deltaTime * chaseSpeed);
	} 
}

function Update () {
	if(target != null){
	//var position: Vector3 = Vector3(-target.position.x,0,-target.position.z); 
		//transform.Translate( position * Time.deltaTime);
		//transform.Translate( -target.position * Time.deltaTime);
		//
		/*if(this.transform.position.x >= target.position.x){
			transform.Translate( Vector3.left * Time.deltaTime);
			//transform.rigidbody.AddForce(Vector3.right * Time.deltaTime);
		}
		else{
			//transform.rigidbody.AddForce(Vector3.left * Time.deltaTime);
			transform.Translate(Vector3.right * Time.deltaTime);
		}
		
		if (this.transform.position.z >= target.position.z){
			//transform.rigidbody.AddForce(Vector3.forward * Time.deltaTime);
			transform.Translate(Vector3.back * Time.deltaTime);
		}
		else{
			//transform.rigidbody.AddForce(Vector3.back * Time.deltaTime);
			transform.Translate(Vector3.forward * Time.deltaTime);
		}*/
		
			
		rigidbody.AddTorque(0f, Time.deltaTime * 10 * multiplier, 0f);
		//transform.Rotate(0f, Time.deltaTime * 10 * multiplier, 0f);
	}	
}
function OnTriggerEnter(other : Collider){// attempt to rebound objects didn't quite work
	if(other.tag == "Boundary"){
			rigidbody.AddForce(-transform.forward * chaseSpeed * 10);
		}
}